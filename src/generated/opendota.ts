/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/heroes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET /heroes
         * @description Get hero data
         */
        get: operations["get_heroes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/heroes/{hero_id}/matchups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET /heroes/{hero_id}/matchups
         * @description Get results against other heroes for a hero
         */
        get: operations["get_heroes_by_hero_id_select_matchups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BenchmarksResponse */
        BenchmarksResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description result */
            result?: {
                gold_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                xp_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                kills_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                last_hits_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                hero_damage_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                hero_healing_per_min?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
                tower_damage?: {
                    /** @description percentile */
                    percentile?: number;
                    /** @description value */
                    value?: number;
                }[];
            };
        };
        /** DistributionsResponse */
        DistributionsResponse: {
            /** @description ranks */
            ranks?: {
                /** @description rows */
                rows?: {
                    /** @description bin */
                    bin?: number;
                    /** @description bin_name */
                    bin_name?: number;
                    /** @description count */
                    count?: number;
                    /** @description cumulative_sum */
                    cumulative_sum?: number;
                }[];
                /** @description sum */
                sum?: {
                    /** @description count */
                    count?: number;
                };
            };
        };
        /** HeroDurationsResponse */
        HeroDurationsResponse: {
            /** @description Lower bound of number of seconds the match lasted */
            duration_bin?: string;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
        };
        /** HeroItemPopularityResponse */
        HeroItemPopularityResponse: {
            /** @description Items bought before game started */
            start_game_items?: {
                /** @description Number of item bought */
                item?: number;
            };
            /** @description Items bought in the first 10 min of the game, with cost at least 700 */
            early_game_items?: {
                /** @description Number of item bought */
                item?: number;
            };
            /** @description Items bought between 10 and 25 min of the game, with cost at least 2000 */
            mid_game_items?: {
                /** @description Number of item bought */
                item?: number;
            };
            /** @description Items bought at least 25 min after game started, with cost at least 4000 */
            late_game_items?: {
                /** @description Number of item bought */
                item?: number;
            };
        };
        /** HeroMatchupsResponse */
        HeroMatchupsResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of games won */
            wins?: number;
        };
        /** HeroObjectResponse */
        HeroObjectResponse: {
            /** @description The ID value of the hero played */
            id: number;
            /**
             * @description Dota hero command name
             * @example npc_dota_hero_antimage
             */
            name?: string;
            /**
             * @description Hero name
             * @example Anti-Mage
             */
            localized_name?: string;
            /** @description Hero primary shorthand attribute name, e.g. 'agi' */
            primary_attr?: string;
            /** @description Hero attack type, either 'Melee' or 'Ranged' */
            attack_type?: string;
            roles?: string[];
        };
        /** HeroStatsResponse */
        HeroStatsResponse: {
            /** @description The ID value of the hero played */
            id?: number;
            /**
             * @description Dota hero command name
             * @example npc_dota_hero_antimage
             */
            name?: string;
            /**
             * @description Hero name
             * @example Anti-Mage
             */
            localized_name?: string;
            /** @description primary_attr */
            primary_attr?: string;
            /** @description attack_type */
            attack_type?: string;
            /** @description roles */
            roles?: string[];
            /** @description img */
            img?: string;
            /** @description icon */
            icon?: string;
            /** @description base_health */
            base_health?: number;
            /** @description base_health_regen */
            base_health_regen?: number;
            /** @description base_mana */
            base_mana?: number;
            /** @description base_mana_regen */
            base_mana_regen?: number;
            /** @description base_armor */
            base_armor?: number;
            /** @description base_mr */
            base_mr?: number;
            /** @description base_attack_min */
            base_attack_min?: number;
            /** @description base_attack_max */
            base_attack_max?: number;
            /** @description base_str */
            base_str?: number;
            /** @description base_agi */
            base_agi?: number;
            /** @description base_int */
            base_int?: number;
            /** @description str_gain */
            str_gain?: number;
            /** @description agi_gain */
            agi_gain?: number;
            /** @description int_gain */
            int_gain?: number;
            /** @description attack_range */
            attack_range?: number;
            /** @description projectile_speed */
            projectile_speed?: number;
            /** @description attack_rate */
            attack_rate?: number;
            /** @description base_attack_time */
            base_attack_time?: number;
            /** @description attack_point */
            attack_point?: number;
            /** @description move_speed */
            move_speed?: number;
            /** @description turn_rate */
            turn_rate?: number;
            /** @description cm_enabled */
            cm_enabled?: boolean;
            /** @description legs */
            legs?: number;
            /** @description day_vision */
            day_vision?: number;
            /** @description night_vision */
            night_vision?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Picks in Turbo mode this month */
            turbo_picks?: number;
            /** @description Wins in Turbo mode this month */
            turbo_wins?: number;
            /** @description pro_ban */
            pro_ban?: number;
            /** @description pro_win */
            pro_win?: number;
            /** @description pro_pick */
            pro_pick?: number;
            /** @description Herald picks */
            "1_pick"?: number;
            /** @description Herald wins */
            "1_win"?: number;
            /** @description Guardian picks */
            "2_pick"?: number;
            /** @description Guardian wins */
            "2_win"?: number;
            /** @description Crusader picks */
            "3_pick"?: number;
            /** @description Crusader wins */
            "3_win"?: number;
            /** @description Archon picks */
            "4_pick"?: number;
            /** @description Archon wins */
            "4_win"?: number;
            /** @description Legend picks */
            "5_pick"?: number;
            /** @description Legend wins */
            "5_win"?: number;
            /** @description Ancient picks */
            "6_pick"?: number;
            /** @description Ancient wins */
            "6_win"?: number;
            /** @description Divine picks */
            "7_pick"?: number;
            /** @description Divine wins */
            "7_win"?: number;
            /** @description Immortal picks */
            "8_pick"?: number;
            /** @description Immortal wins */
            "8_win"?: number;
        };
        /** LeagueObjectResponse */
        LeagueObjectResponse: {
            /** @description leagueid */
            leagueid?: number;
            /** @description ticket */
            ticket?: string;
            /** @description banner */
            banner?: string;
            /** @description tier */
            tier?: string;
            /**
             * @description League name
             * @example ASUS ROG DreamLeague Season 4
             */
            name?: string;
        };
        /** MatchObjectResponse */
        MatchObjectResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description The Radiant's team_id */
            radiant_team_id?: number;
            /** @description The Radiant's team name */
            radiant_name?: string;
            /** @description The Dire's team_id */
            dire_team_id?: number;
            /** @description The Dire's team name */
            dire_name?: string;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description Identifier for the series of the match */
            series_id?: number;
            /** @description Type of series the match was */
            series_type?: number;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
        };
        /** MatchResponse */
        MatchResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game. */
            barracks_status_dire?: number;
            /** @description Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game. */
            barracks_status_radiant?: number;
            /** @description Array containing information on the chat of the game */
            chat?: {
                /** @description Time in seconds at which the message was said */
                time?: number;
                /** @description Name of the player who sent the message */
                unit?: string;
                /** @description The message the player sent */
                key?: string;
                /** @description slot */
                slot?: number;
                /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                player_slot?: number | null;
            }[];
            /** @description cluster */
            cluster?: number;
            /** @description cosmetics */
            cosmetics?: {
                [key: string]: number;
            };
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description draft_timings */
            draft_timings?: {
                /** @description order */
                order?: number;
                /** @description pick */
                pick?: boolean;
                /** @description active_team */
                active_team?: number;
                /** @description The ID value of the hero played */
                hero_id?: number;
                /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                player_slot?: number | null;
                /** @description extra_time */
                extra_time?: number;
                /** @description total_time_taken */
                total_time_taken?: number;
            }[];
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description engine */
            engine?: number;
            /** @description Time in seconds at which first blood occurred */
            first_blood_time?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Number of human players in the game */
            human_players?: number;
            /** @description leagueid */
            leagueid?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description match_seq_num */
            match_seq_num?: number;
            /** @description Number of negative votes the replay received in the in-game client */
            negative_votes?: number;
            /** @description objectives */
            objectives?: Record<string, never>[];
            /** @description Array containing information on the draft. Each item contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order. */
            picks_bans?: {
                /** @description Boolean indicating whether the choice is a pick or a ban */
                is_pick?: boolean;
                /** @description The ID value of the hero played */
                hero_id?: number;
                /** @description The team that picked or banned the hero */
                team?: number;
                /** @description The order of the pick or ban */
                order?: number;
            }[];
            /** @description Number of positive votes the replay received in the in-game client */
            positive_votes?: number;
            /** @description Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage.  */
            radiant_gold_adv?: number[];
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage.  */
            radiant_xp_adv?: number[];
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description teamfights */
            teamfights?: Record<string, never>[] | null;
            /** @description Bitmask. An integer that represents a binary of which Dire towers are still standing. */
            tower_status_dire?: number;
            /** @description Bitmask. An integer that represents a binary of which Radiant towers are still standing. */
            tower_status_radiant?: number;
            /** @description Parse version, used internally by OpenDota */
            version?: number;
            /** @description replay_salt */
            replay_salt?: number;
            /** @description series_id */
            series_id?: number;
            /** @description series_type */
            series_type?: number;
            /** @description radiant_team */
            radiant_team?: Record<string, never>;
            /** @description dire_team */
            dire_team?: Record<string, never>;
            /** @description league */
            league?: Record<string, never>;
            /** @description Skill bracket assigned by Valve (Normal, High, Very High) */
            skill?: number | null;
            /** @description Array of information on individual players */
            players?: {
                /**
                 * @description The ID number of the match assigned by Valve
                 * @example 3703866531
                 */
                match_id?: number;
                /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                player_slot?: number | null;
                /** @description An array describing how abilities were upgraded */
                ability_upgrades_arr?: number[];
                /** @description Object containing information on how many times the played used their abilities */
                ability_uses?: Record<string, never>;
                /** @description Object containing information on who the player used their abilities on */
                ability_targets?: Record<string, never>;
                /** @description Object containing information on how and how much damage the player dealt to other heroes */
                damage_targets?: Record<string, never>;
                /** @description The player account ID */
                account_id?: number;
                /** @description Object containing information on how many and what type of actions the player issued to their hero */
                actions?: Record<string, never>;
                /** @description Object containing information on additional units the player had under their control */
                additional_units?: Record<string, never>[] | null;
                /** @description Number of assists the player had */
                assists?: number;
                /** @description Item in backpack slot 0 */
                backpack_0?: number;
                /** @description Item in backpack slot 1 */
                backpack_1?: number;
                /** @description Item in backpack slot 2 */
                backpack_2?: number;
                /** @description Array containing information about buybacks */
                buyback_log?: {
                    /** @description Time in seconds the buyback occurred */
                    time?: number;
                    /** @description slot */
                    slot?: number;
                    /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                    player_slot?: number | null;
                }[];
                /** @description Number of camps stacked */
                camps_stacked?: number;
                /** @description Array containing information about the player's disconnections and reconnections */
                connection_log?: {
                    /** @description Game time in seconds the event ocurred */
                    time?: number;
                    /** @description Event that occurred */
                    event?: string;
                    /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
                    player_slot?: number | null;
                }[];
                /** @description Number of creeps stacked */
                creeps_stacked?: number;
                /** @description Object containing information about damage dealt by the player to different units */
                damage?: Record<string, never>;
                /** @description Object containing information about about the sources of this player's damage to heroes */
                damage_inflictor?: Record<string, never>;
                /** @description Object containing information about the sources of damage received by this player from heroes */
                damage_inflictor_received?: Record<string, never>;
                /** @description Object containing information about from whom the player took damage */
                damage_taken?: Record<string, never>;
                /** @description Number of deaths */
                deaths?: number;
                /** @description Number of denies */
                denies?: number;
                /** @description Array containing number of denies at different times of the match */
                dn_t?: number[];
                /** @description Gold at the end of the game */
                gold?: number;
                /** @description Gold Per Minute obtained by this player */
                gold_per_min?: number;
                /** @description Object containing information on how the player gainined gold over the course of the match */
                gold_reasons?: Record<string, never>;
                /** @description How much gold the player spent */
                gold_spent?: number;
                /** @description Array containing total gold at different times of the match */
                gold_t?: number[];
                /** @description Hero Damage Dealt */
                hero_damage?: number;
                /** @description Hero Healing Done */
                hero_healing?: number;
                /** @description Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors */
                hero_hits?: Record<string, never>;
                /** @description The ID value of the hero played */
                hero_id?: number;
                /** @description Item in the player's first slot */
                item_0?: number;
                /** @description Item in the player's second slot */
                item_1?: number;
                /** @description Item in the player's third slot */
                item_2?: number;
                /** @description Item in the player's fourth slot */
                item_3?: number;
                /** @description Item in the player's fifth slot */
                item_4?: number;
                /** @description Item in the player's sixth slot */
                item_5?: number;
                /** @description Object containing information about how many times a player used items */
                item_uses?: Record<string, never>;
                /** @description Object containing information about the player's killstreaks */
                kill_streaks?: Record<string, never>;
                /** @description Object containing information about what units the player killed */
                killed?: Record<string, never>;
                /** @description Object containing information about who killed the player */
                killed_by?: Record<string, never>;
                /** @description Number of kills */
                kills?: number;
                /** @description Array containing information on which hero the player killed at what time */
                kills_log?: {
                    /** @description Time in seconds the player killed the hero */
                    time?: number;
                    /** @description Hero killed */
                    key?: string;
                }[];
                /** @description Object containing information on lane position */
                lane_pos?: Record<string, never>;
                /** @description Number of last hits */
                last_hits?: number;
                /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
                leaver_status?: number;
                /** @description Level at the end of the game */
                level?: number;
                /** @description Array describing last hits at each minute in the game */
                lh_t?: number[];
                /** @description life_state */
                life_state?: Record<string, never>;
                /** @description Object with information on the highest damage instance the player inflicted */
                max_hero_hit?: Record<string, never>;
                /** @description Object with information on the number of the number of multikills the player had */
                multi_kills?: Record<string, never>;
                /** @description Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192. */
                obs?: Record<string, never>;
                /** @description obs_left_log */
                obs_left_log?: Record<string, never>[];
                /** @description Object containing information on when and where the player placed observer wards */
                obs_log?: Record<string, never>[];
                /** @description Total number of observer wards placed */
                obs_placed?: number;
                /** @description party_id */
                party_id?: number;
                /** @description Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json */
                permanent_buffs?: Record<string, never>[];
                /** @description 1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json */
                hero_variant?: number;
                /** @description Total number of pings */
                pings?: number;
                /** @description Object containing information on the items the player purchased */
                purchase?: Record<string, never>;
                /** @description Object containing information on when items were purchased */
                purchase_log?: {
                    /** @description Time in seconds the item was bought */
                    time?: number;
                    /** @description String item ID */
                    key?: string;
                    /** @description Integer amount of charges */
                    charges?: number;
                }[];
                /** @description Number of runes picked up */
                rune_pickups?: number;
                /** @description Object with information about which runes the player picked up */
                runes?: {
                    [key: string]: number;
                };
                /** @description Array with information on when runes were picked up */
                runes_log?: {
                    /** @description Time in seconds rune picked up */
                    time?: number;
                    /** @description key */
                    key?: number;
                }[];
                /** @description Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192. */
                sen?: Record<string, never>;
                /** @description Array containing information on when and where the player placed sentries */
                sen_left_log?: Record<string, never>[];
                /** @description Array with information on when and where sentries were placed by the player */
                sen_log?: Record<string, never>[];
                /** @description How many sentries were placed by the player */
                sen_placed?: number;
                /** @description Total stun duration of all stuns by the player */
                stuns?: number;
                /** @description Time in seconds corresponding to the time of entries of other arrays in the match. */
                times?: number[];
                /** @description Total tower damage done by the player */
                tower_damage?: number;
                /** @description Experience Per Minute obtained by the player */
                xp_per_min?: number;
                /** @description Object containing information on the sources of this player's experience */
                xp_reasons?: Record<string, never>;
                /** @description Experience at each minute of the game */
                xp_t?: number[];
                /**
                 * @description Player's Steam name
                 * @example 420 booty wizard
                 */
                personaname?: string | null;
                /** @description name */
                name?: string | null;
                /**
                 * Format: date-time
                 * @description Time of player's last login
                 */
                last_login?: string | null;
                /** @description Boolean indicating whether Radiant won the match */
                radiant_win?: boolean | null;
                /** @description The Unix timestamp at which the game started */
                start_time?: number;
                /** @description Duration of the game in seconds */
                duration?: number;
                /** @description cluster */
                cluster?: number;
                /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
                lobby_type?: number;
                /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
                game_mode?: number;
                /** @description Patch ID, from dotaconstants */
                patch?: number;
                /** @description Integer corresponding to the region the game was played on */
                region?: number;
                /** @description Boolean for whether or not the player is on Radiant */
                isRadiant?: boolean;
                /** @description Binary integer representing whether or not the player won */
                win?: number;
                /** @description Binary integer representing whether or not the player lost */
                lose?: number;
                /** @description Total gold at the end of the game */
                total_gold?: number;
                /** @description Total experience at the end of the game */
                total_xp?: number;
                /** @description Number of kills per minute */
                kills_per_min?: number;
                /** @description kda */
                kda?: number;
                /** @description abandons */
                abandons?: number;
                /** @description Total number of neutral creeps killed */
                neutral_kills?: number;
                /** @description Total number of tower kills the player had */
                tower_kills?: number;
                /** @description Total number of courier kills the player had */
                courier_kills?: number;
                /** @description Total number of lane creeps killed by the player */
                lane_kills?: number;
                /** @description Total number of heroes killed by the player */
                hero_kills?: number;
                /** @description Total number of observer wards killed by the player */
                observer_kills?: number;
                /** @description Total number of sentry wards killed by the player */
                sentry_kills?: number;
                /** @description Total number of roshan kills (last hit on roshan) the player had */
                roshan_kills?: number;
                /** @description Total number of Necronomicon creeps killed by the player */
                necronomicon_kills?: number;
                /** @description Total number of Ancient creeps killed by the player */
                ancient_kills?: number;
                /** @description Total number of buyback the player used */
                buyback_count?: number;
                /** @description Number of observer wards used */
                observer_uses?: number;
                /** @description Number of sentry wards used */
                sentry_uses?: number;
                /** @description lane_efficiency */
                lane_efficiency?: number;
                /** @description lane_efficiency_pct */
                lane_efficiency_pct?: number;
                /** @description Integer referring to which lane the hero laned in */
                lane?: number | null;
                /** @description lane_role */
                lane_role?: number | null;
                /** @description Boolean referring to whether or not the player roamed */
                is_roaming?: boolean | null;
                /** @description Object with information on when the player last purchased an item */
                purchase_time?: Record<string, never>;
                /** @description Object with information on when the player first puchased an item */
                first_purchase_time?: Record<string, never>;
                /** @description Object with information on whether or not the item won */
                item_win?: Record<string, never>;
                /** @description Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1) */
                item_usage?: Record<string, never>;
                /** @description Total number of TP scrolls purchased by the player */
                purchase_tpscroll?: number;
                /** @description Actions per minute */
                actions_per_min?: number;
                /** @description life_state_dead */
                life_state_dead?: number;
                /** @description The rank tier of the player. Tens place indicates rank, ones place indicates stars. */
                rank_tier?: number;
                /** @description cosmetics */
                cosmetics?: {
                    item_id?: number;
                    /** @description name */
                    name?: string | null;
                    prefab?: string;
                    /** Format: date-time */
                    creation_date?: string | null;
                    image_inventory?: string | null;
                    image_path?: string | null;
                    item_description?: string | null;
                    item_name?: string;
                    item_rarity?: string | null;
                    item_type_name?: string | null;
                    used_by_heroes?: string | null;
                }[];
                /** @description Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc */
                benchmarks?: Record<string, never>;
                /** @description Object containing information on neutral tokens drops */
                neutral_tokens_log?: {
                    /** @description Time in seconds at which the token was dropped */
                    time?: number;
                    /** @description Type of token dropped */
                    key?: string;
                }[];
                /** @description Object containing information on neutral item history */
                neutral_item_history?: {
                    /** @description Time in seconds at which the item was crafted */
                    time?: number;
                    /** @description Neutral item name */
                    item_neutral?: string;
                    /** @description Neutral enhancement name */
                    item_neutral_enhancement?: string;
                }[];
            }[];
            /** @description Patch ID, from dotaconstants */
            patch?: number;
            /** @description Integer corresponding to the region the game was played on */
            region?: number;
            /** @description Word counts of the all chat messages in the player's games */
            all_word_counts?: Record<string, never>;
            /** @description Word counts of the player's all chat messages */
            my_word_counts?: Record<string, never>;
            /** @description Maximum gold advantage of the player's team if they lost the match */
            throw?: number;
            /** @description Maximum gold disadvantage of the player's team if they won the match */
            comeback?: number;
            /** @description Maximum gold disadvantage of the player's team if they lost the match */
            loss?: number;
            /** @description Maximum gold advantage of the player's team if they won the match */
            win?: number;
            /** @description replay_url */
            replay_url?: string;
        };
        /** MetadataResponse */
        MetadataResponse: {
            /** @description banner */
            banner?: Record<string, never> | null;
        };
        /** ParsedMatchesResponse */
        ParsedMatchesResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
        };
        /** PlayerCountsResponse */
        PlayerCountsResponse: {
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: Record<string, never>;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: Record<string, never>;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: Record<string, never>;
            /** @description lane_role */
            lane_role?: Record<string, never>;
            /** @description Integer corresponding to the region the game was played on */
            region?: Record<string, never>;
            /** @description Patch ID, from dotaconstants */
            patch?: Record<string, never>;
        };
        /**
         * PlayerHeroesResponse
         * @description hero
         */
        PlayerHeroesResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description last_played */
            last_played?: number;
            /** @description games */
            games?: number;
            /** @description win */
            win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description against_win */
            against_win?: number;
        };
        /**
         * PlayerMatchesResponse
         * @description Object containing information on the match
         */
        PlayerMatchesResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
            player_slot?: number | null;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description version */
            version?: number | null;
            /** @description Total kills the player had at the end of the game */
            kills?: number;
            /** @description Total deaths the player had at the end of the game */
            deaths?: number;
            /** @description Total assists the player had at the end of the game */
            assists?: number;
            /** @description Skill bracket assigned by Valve (Normal, High, Very High) */
            skill?: number | null;
            /** @description Average rank of players with public match data */
            average_rank?: number | null;
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: number;
            /** @description Size of the player's party */
            party_size?: number | null;
            /** @description 1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json */
            hero_variant?: number;
        };
        /** PlayerObjectResponse */
        PlayerObjectResponse: {
            /** @description The player account ID */
            account_id?: number;
            /** @description Player's steam identifier */
            steamid?: string;
            /** @description Steam picture URL (small picture) */
            avatar?: string;
            /** @description Steam picture URL (medium picture) */
            avatarmedium?: string;
            /** @description Steam picture URL (full picture) */
            avatarfull?: string;
            /** @description Steam profile URL */
            profileurl?: string;
            /**
             * @description Player's Steam name
             * @example 420 booty wizard
             */
            personaname?: string | null;
            /**
             * Format: date-time
             * @description Date and time of last login to OpenDota
             */
            last_login?: string;
            /**
             * Format: date-time
             * @description Date and time of last request to refresh player's match history
             */
            full_history_time?: string;
            /** @description Amount of dollars the player has donated to OpenDota */
            cheese?: number;
            /** @description Whether the refresh of player' match history failed */
            fh_unavailable?: boolean;
            /** @description Player's country identifier, e.g. US */
            loccountrycode?: string;
            /** @description Verified player name, e.g. 'Miracle-' */
            name?: string;
            /** @description Player's country code */
            country_code?: string;
            /** @description Player's ingame role (core: 1 or support: 2) */
            fantasy_role?: number;
            /** @description Player's team identifier */
            team_id?: number;
            /**
             * @description Team name
             * @example Newbee
             */
            team_name?: string | null;
            /** @description Player's team shorthand tag, e.g. 'EG' */
            team_tag?: string;
            /** @description Whether the roster lock is active */
            is_locked?: boolean;
            /** @description Whether the player is professional or not */
            is_pro?: boolean;
            /** @description When the roster lock will end */
            locked_until?: number;
        };
        /** PlayerPeersResponse */
        PlayerPeersResponse: {
            /** @description The player account ID */
            account_id?: number;
            /** @description last_played */
            last_played?: number;
            /** @description win */
            win?: number;
            /** @description games */
            games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description against_win */
            against_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description with_gpm_sum */
            with_gpm_sum?: number;
            /** @description with_xpm_sum */
            with_xpm_sum?: number;
            /**
             * @description Player's Steam name
             * @example 420 booty wizard
             */
            personaname?: string | null;
            /** @description name */
            name?: string | null;
            /** @description is_contributor */
            is_contributor?: boolean;
            /** @description is_subscriber */
            is_subscriber?: boolean;
            /** @description last_login */
            last_login?: string | null;
            /** @description avatar */
            avatar?: string | null;
            /** @description avatarfull */
            avatarfull?: string | null;
        };
        /** PlayerProsResponse */
        PlayerProsResponse: {
            /** @description The player account ID */
            account_id?: number;
            /** @description name */
            name?: string | null;
            /** @description country_code */
            country_code?: string;
            /** @description fantasy_role */
            fantasy_role?: number;
            /** @description team_id */
            team_id?: number;
            /**
             * @description Team name
             * @example Newbee
             */
            team_name?: string | null;
            /** @description team_tag */
            team_tag?: string | null;
            /** @description is_locked */
            is_locked?: boolean;
            /** @description is_pro */
            is_pro?: boolean;
            /** @description locked_until */
            locked_until?: number | null;
            /** @description steamid */
            steamid?: string | null;
            /** @description avatar */
            avatar?: string | null;
            /** @description avatarmedium */
            avatarmedium?: string | null;
            /** @description avatarfull */
            avatarfull?: string | null;
            /** @description profileurl */
            profileurl?: string | null;
            /**
             * Format: date-time
             * @description last_login
             */
            last_login?: string | null;
            /**
             * Format: date-time
             * @description full_history_time
             */
            full_history_time?: string | null;
            /** @description cheese */
            cheese?: number | null;
            /** @description fh_unavailable */
            fh_unavailable?: boolean | null;
            /** @description loccountrycode */
            loccountrycode?: string | null;
            /** @description last_played */
            last_played?: number | null;
            /** @description win */
            win?: number;
            /** @description games */
            games?: number;
            /** @description with_win */
            with_win?: number;
            /** @description with_games */
            with_games?: number;
            /** @description against_win */
            against_win?: number;
            /** @description against_games */
            against_games?: number;
            /** @description with_gpm_sum */
            with_gpm_sum?: number | null;
            /** @description with_xpm_sum */
            with_xpm_sum?: number | null;
        };
        /** PlayerRankingsResponse */
        PlayerRankingsResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Hero score */
            score?: number;
            /** @description percent_rank */
            percent_rank?: number;
            /** @description numeric_rank */
            card?: number;
        };
        /** PlayerRatingsResponse */
        PlayerRatingsResponse: {
            /** @description The player account ID */
            account_id?: number;
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description solo_competitive_rank */
            solo_competitive_rank?: number | null;
            /** @description competitive_rank */
            competitive_rank?: number;
            /** @description time */
            time?: number;
        };
        /**
         * PlayerRecentMatchesResponse
         * @description match
         */
        PlayerRecentMatchesResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
            player_slot?: number | null;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
            game_mode?: number;
            /** @description Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
            lobby_type?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description version */
            version?: number | null;
            /** @description Total kills the player had at the end of the match */
            kills?: number;
            /** @description Total deaths the player had at the end of the match */
            deaths?: number;
            /** @description Total assists the player had at the end of the match */
            assists?: number;
            /** @description Skill bracket assigned by Valve (Normal, High, Very High). If the skill is unknown, will return null. */
            skill?: number | null;
            /** @description Average rank of players with public match data */
            average_rank?: number | null;
            /** @description Experience Per Minute obtained by the player */
            xp_per_min?: number;
            /** @description Average gold per minute of the player */
            gold_per_min?: number;
            /** @description Total hero damage to enemy heroes */
            hero_damage?: number;
            /** @description Total healing of ally heroes */
            hero_healing?: number;
            /** @description Total last hits the player had at the end of the match */
            last_hits?: number;
            /** @description Integer corresponding to which lane the player laned in for the match */
            lane?: number | null;
            /** @description lane_role */
            lane_role?: number | null;
            /** @description Boolean describing whether or not the player roamed */
            is_roaming?: boolean | null;
            /** @description cluster */
            cluster?: number;
            /** @description Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
            leaver_status?: number;
            /** @description Size of the players party. If not in a party, will return 1. */
            party_size?: number | null;
            /** @description 1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json */
            hero_variant?: number;
        };
        /** PlayerResponse */
        PlayersResponse: {
            /** @description solo_competitive_rank */
            solo_competitive_rank?: number | null;
            /** @description competitive_rank */
            competitive_rank?: number | null;
            /** @description rank_tier */
            rank_tier?: number | null;
            /** @description leaderboard_rank */
            leaderboard_rank?: number | null;
            /** @description profile */
            profile?: {
                /** @description The player account ID */
                account_id?: number;
                /**
                 * @description Player's Steam name
                 * @example 420 booty wizard
                 */
                personaname?: string | null;
                /** @description name */
                name?: string | null;
                /** @description Boolean indicating status of current Dota Plus subscription */
                plus?: boolean;
                /** @description cheese */
                cheese?: number | null;
                /** @description steamid */
                steamid?: string | null;
                /** @description avatar */
                avatar?: string | null;
                /** @description avatarmedium */
                avatarmedium?: string | null;
                /** @description avatarfull */
                avatarfull?: string | null;
                /** @description profileurl */
                profileurl?: string | null;
                /** @description last_login */
                last_login?: string | null;
                /** @description loccountrycode */
                loccountrycode?: string | null;
                /**
                 * @description Boolean indicating if the user contributed to the development of OpenDota
                 * @default false
                 */
                is_contributor: boolean;
                /**
                 * @description Boolean indicating if the user subscribed to OpenDota
                 * @default false
                 */
                is_subscriber: boolean;
            };
        };
        /** PlayerTotalsResponse */
        PlayerTotalsResponse: {
            /** @description field */
            field?: string;
            /** @description number */
            n?: number;
            /** @description sum */
            sum?: number;
        };
        /** PlayerWardMapResponse */
        PlayerWardMapResponse: {
            /** @description obs */
            obs?: Record<string, never>;
            /** @description sen */
            sen?: Record<string, never>;
        };
        /** PlayerWinLossResponse */
        PlayerWinLossResponse: {
            /** @description Number of wins */
            win?: number;
            /** @description Number of loses */
            lose?: number;
        };
        /** PlayerWordCloudResponse */
        PlayerWordCloudResponse: {
            /** @description my_word_counts */
            my_word_counts?: Record<string, never>;
            /** @description all_word_counts */
            all_word_counts?: Record<string, never>;
        };
        /** PublicMatchesResponse */
        PublicMatchesResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description match_seq_num */
            match_seq_num?: number;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description Duration of the game in seconds */
            duration?: number;
            lobby_type?: number;
            game_mode?: number;
            avg_rank_tier?: number;
            num_rank_tier?: number;
            cluster?: number;
            /** @description radiant_team */
            radiant_team?: number[];
            /** @description dire_team */
            dire_team?: number[];
        };
        /** RankingsResponse */
        RankingsResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description rankings */
            rankings?: {
                /** @description The player account ID */
                account_id?: number;
                /** @description Score */
                score?: number;
                /** @description steamid */
                steamid?: string | null;
                /** @description avatar */
                avatar?: string | null;
                /** @description avatarmedium */
                avatarmedium?: string | null;
                /** @description avatarfull */
                avatarfull?: string | null;
                /** @description profileurl */
                profileurl?: string | null;
                /**
                 * @description Player's Steam name
                 * @example 420 booty wizard
                 */
                personaname?: string | null;
                /**
                 * Format: date-time
                 * @description last_login
                 */
                last_login?: string | null;
                /**
                 * Format: date-time
                 * @description full_history_time
                 */
                full_history_time?: string;
                /** @description cheese */
                cheese?: number | null;
                /** @description fh_unavailable */
                fh_unavailable?: boolean | null;
                /** @description loccountrycode */
                loccountrycode?: string | null;
                /** @description rank_tier */
                rank_tier?: number | null;
            }[];
        };
        /** RecordsResponse */
        RecordsResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Record score */
            score?: number;
        };
        /** ScenarioItemTimingsResponse */
        ScenarioItemTimingsResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description Purchased item */
            item?: string;
            /** @description Ingame time in seconds before the item was purchased */
            time?: number;
            /** @description The number of games where the hero bought this item before this time */
            games?: string;
            /** @description The number of games won where the hero bought this item before this time */
            wins?: string;
        };
        /** ScenarioLaneRolesResponse */
        ScenarioLaneRolesResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /** @description The hero's lane role */
            lane_role?: number;
            /** @description Maximum game length in seconds */
            time?: number;
            /** @description The number of games where the hero played in this lane role */
            games?: string;
            /** @description The number of games won where the hero played in this lane role */
            wins?: string;
        };
        /** ScenarioMiscResponse */
        ScenarioMiscResponse: {
            /** @description The scenario's name or description */
            scenario?: string;
            /** @description Boolean indicating whether Radiant executed this scenario */
            is_radiant?: boolean;
            /** @description Region the game was played in */
            region?: number;
            /** @description The number of games where this scenario occurred */
            games?: string;
            /** @description The number of games won where this scenario occured */
            wins?: string;
        };
        /** SchemaResponse */
        SchemaResponse: {
            /** @description table_name */
            table_name?: string;
            /** @description column_name */
            column_name?: string;
            /** @description data_type */
            data_type?: string;
        };
        /** SearchResponse */
        SearchResponse: {
            /** @description The player account ID */
            account_id?: number;
            /** @description avatarfull */
            avatarfull?: string | null;
            /**
             * @description Player's Steam name
             * @example 420 booty wizard
             */
            personaname?: string | null;
            /** @description last_match_time. May not be present or null. */
            last_match_time?: string;
            /** @description similarity */
            similarity?: number;
        };
        /** TeamHeroesResponse */
        TeamHeroesResponse: {
            /** @description The ID value of the hero played */
            hero_id?: number;
            /**
             * @description Hero name
             * @example Anti-Mage
             */
            name?: string;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
        };
        /** TeamMatchObjectResponse */
        TeamMatchObjectResponse: {
            /**
             * @description The ID number of the match assigned by Valve
             * @example 3703866531
             */
            match_id?: number;
            /** @description Whether the team/player/hero was on Radiant */
            radiant?: boolean;
            /** @description Boolean indicating whether Radiant won the match */
            radiant_win?: boolean | null;
            /** @description Number of kills the Radiant team had when the match ended */
            radiant_score?: number;
            /** @description Number of kills the Dire team had when the match ended */
            dire_score?: number;
            /** @description Duration of the game in seconds */
            duration?: number;
            /** @description The Unix timestamp at which the game started */
            start_time?: number;
            /** @description Identifier for the league the match took place in */
            leagueid?: number;
            /** @description Name of league the match took place in */
            league_name?: string;
            /** @description cluster */
            cluster?: number;
            /** @description Opposing team identifier */
            opposing_team_id?: number;
            /** @description Opposing team name, e.g. 'Evil Geniuses' */
            opposing_team_name?: string | null;
            /** @description Opposing team logo url */
            opposing_team_logo?: string;
        };
        /** TeamObjectResponse */
        TeamObjectResponse: {
            /** @description Team's identifier */
            team_id?: number;
            /** @description The Elo rating of the team */
            rating?: number;
            /** @description The number of games won by this team */
            wins?: number;
            /** @description The number of losses by this team */
            losses?: number;
            /** @description The Unix timestamp of the last match played by this team */
            last_match_time?: number;
            /**
             * @description Team name
             * @example Newbee
             */
            name?: string | null;
            /** @description The team tag/abbreviation */
            tag?: string;
        };
        /** TeamPlayersResponse */
        TeamPlayersResponse: {
            /** @description The player account ID */
            account_id?: number;
            /** @description name */
            name?: string | null;
            /** @description Number of games played */
            games_played?: number;
            /** @description Number of wins */
            wins?: number;
            /** @description If this player is on the current roster */
            is_current_team_member?: boolean;
        };
    };
    responses: never;
    parameters: {
        /** @description Hero ID */
        heroIdPathParam: number;
        /** @description League ID */
        leagueIdPathParam: number;
        matchIdParam: number;
        /** @description Get matches with a match ID lower than this value */
        lessThanMatchIdParam: number;
        /** @description Minimum rank for the matches. Ranks are represented by integers (10-15: Herald, 20-25: Guardian, 30-35: Crusader, 40-45: Archon, 50-55: Legend, 60-65: Ancient, 70-75: Divine, 80-85: Immortal). Each increment represents an additional star. */
        minRankParam: number;
        /** @description Maximum rank for the matches. Ranks are represented by integers (10-15: Herald, 20-25: Guardian, 30-35: Crusader, 40-45: Archon, 50-55: Legend, 60-65: Ancient, 70-75: Divine, 80-85: Immortal). Each increment represents an additional star. */
        maxRankParam: number;
        /** @description Order by average rank ascending */
        mmrAscendingParam: number;
        /** @description Order by average rank descending */
        mmrDescendingParam: number;
        /** @description Steam32 account ID */
        accountIdParam: number;
        /** @description Field to aggregate on */
        fieldParam: string;
        /** @description Fields to project (array) */
        projectParam: string;
        /** @description Number of matches to limit to */
        limitParam: number;
        /** @description Number of matches to offset start by */
        offsetParam: number;
        /** @description Whether the player won */
        winParam: number;
        /** @description Patch ID, from dotaconstants */
        patchParam: number;
        /** @description Game Mode ID */
        gameModeParam: number;
        /** @description Lobby type ID */
        lobbyTypeParam: number;
        /** @description Region ID */
        regionParam: number;
        /** @description Days previous */
        dateParam: number;
        /** @description Lane Role ID */
        laneRoleParam: number;
        /** @description Hero ID */
        heroIdParam: number;
        /** @description Whether the player was radiant */
        isRadiantParam: number;
        /** @description Account IDs in the match (array) */
        includedAccountIdParam: number;
        /** @description Account IDs not in the match (array) */
        excludedAccountIdParam: number;
        /** @description Hero IDs on the player's team (array) */
        withHeroIdParam: number;
        /** @description Hero IDs against the player's team (array) */
        againstHeroIdParam: number;
        /** @description Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches. */
        significantParam: number;
        /** @description The minimum number of games played, for filtering hero stats */
        havingParam: number;
        /** @description The field to return matches sorted by in descending order */
        sortParam: string;
        /** @description Name of the scenario (see teamScenariosQueryParams) */
        scenarioParam: string;
        /** @description Team ID */
        teamIdPathParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_heroes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["HeroObjectResponse"][];
                };
            };
        };
    };
    get_heroes_by_hero_id_select_matchups: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Hero ID */
                hero_id: components["parameters"]["heroIdPathParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["HeroMatchupsResponse"][];
                };
            };
        };
    };
}
